const d = (e, n) => String(Math.ceil(e)).padStart(n ?? 2, "0"), l = (e) => e === 0 ? 12 : e === 12 ? 0 : e > 12 ? e - 12 : e, M = (e) => e >= 12 ? "PM" : "AM", h = (e, n) => n === "AM" ? e === 12 ? 0 : e : e === 0 ? 12 : e === 12 ? e : e + 12;
function m() {
  const e = /* @__PURE__ */ new Date();
  let n = e.getHours(), t = "AM";
  return n > 12 && (n -= 12, t = "PM"), n === 12 && (t = "PM"), n === 0 && (n = 12), { hour: n, minute: e.getMinutes(), second: e.getSeconds(), meridiem: t };
}
function Y({ startYear: e, endYear: n, count: t, year: i, yearRange: r }) {
  const u = i || (/* @__PURE__ */ new Date()).getFullYear();
  if (!e) {
    const o = Math.floor(u / t) * t;
    e = o === u ? u - t + 1 : o + 1;
  }
  n || (n = e + t - 1);
  const s = [];
  let c = e, g = n;
  for (let o = e; o <= n; o++)
    r != null && r.start && o < (r == null ? void 0 : r.start) ? (s.push(""), c = r == null ? void 0 : r.start) : r != null && r.end && o > (r == null ? void 0 : r.end) ? (s.push(""), g = r == null ? void 0 : r.end) : s.push(o + "");
  return { array: s, range: `${c} - ${g}`, startYear: e, endYear: n };
}
export {
  h as convert12HourTo24Hour,
  l as convert24HourTo12Hour,
  M as getAmPm,
  m as getCurrentTime,
  Y as getYearRange,
  d as leadingZeros
};
