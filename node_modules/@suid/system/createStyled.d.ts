import type { Theme } from "./createTheme/createTheme";
import { StyledProps } from "./styledProps";
import { SxProps } from "./sxProps";
import { ElementType, OverridableComponent, OverridableInProps, PropsOf } from "@suid/types";
import { JSX } from "solid-js";
export interface ComponentProps<T, O> {
    ownerState: O;
    theme: T;
    sx?: SxProps<T>;
    as?: ElementType;
}
type Style<T extends Theme<any>, P, O> = ((props: ComponentProps<T, O> & {
    props: P;
}) => false | StyledProps) | false | StyledProps;
export type StyledOptions<N extends string> = {
    name?: N;
    slot?: string;
    skipSx?: boolean;
    skipProps?: string[];
    overridesResolver?: (props: Record<string, any>, styles: Record<string, any>) => (string | false | Record<string, any>)[];
};
export type StyledComponent<C, O = unknown> = (props: PropsOf<C> & Partial<ComponentProps<Theme, O>>) => JSX.Element;
export declare function redefine<C, O, T extends ElementType>(component: StyledComponent<C, O>, ..._types: T[]): StyledComponent<T, O>;
export declare const skipProps: (keyof ComponentProps<any, any>)[];
type SuidComponentType = "system" | "base";
export declare function setSuidComponentType(cb: (...args: any[]) => any, type: SuidComponentType): void;
declare function createStyled<T extends Theme<any>, CM extends Record<string, any> = {}>(config?: {
    onUseTheme?: () => T;
}): <C extends ElementType, N extends string = string>(Component: C, options?: StyledOptions<N>) => <O = N extends keyof CM ? CM[N] extends OverridableComponent<infer M2 extends import("@suid/types").OverridableTypeMap> ? OverridableInProps<M2> : unknown : C extends OverridableComponent<infer M extends import("@suid/types").OverridableTypeMap> ? OverridableInProps<M> : unknown>(...styles: Style<T, N extends keyof CM ? CM[N] extends OverridableComponent<infer M3 extends import("@suid/types").OverridableTypeMap> ? PropsOf<M3> : PropsOf<C> : PropsOf<C>, O>[]) => C extends OverridableComponent<infer M_1 extends import("@suid/types").OverridableTypeMap> ? OverridableComponent<{
    defaultComponent: M_1["defaultComponent"];
    props: M_1["props"] & {
        ownerState?: O | undefined;
    };
}> : StyledComponent<C, O>;
export default createStyled;
//# sourceMappingURL=createStyled.d.ts.map