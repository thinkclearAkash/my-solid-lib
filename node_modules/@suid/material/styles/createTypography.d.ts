import StyledProps from "@suid/system/styledProps";
import { DeepPartial } from "@suid/types";
export type ThemeTypographyType = TypographyOptions & {
    pxToRem: (px: number) => string;
};
export type TypographyVariants = {
    h1: StyledProps;
    h2: StyledProps;
    h3: StyledProps;
    h4: StyledProps;
    h5: StyledProps;
    h6: StyledProps;
    subtitle1: StyledProps;
    subtitle2: StyledProps;
    body1: StyledProps;
    body2: StyledProps;
    button: StyledProps;
    caption: StyledProps;
    overline: StyledProps;
};
export type Variant = keyof TypographyVariants;
export interface TypographyOptions extends TypographyVariants {
    fontFamily: string;
    fontSize: number;
    htmlFontSize: number;
    fontWeightLight: number;
    fontWeightRegular: number;
    fontWeightMedium: number;
    fontWeightBold: number;
}
export declare const typographyDefaults: TypographyOptions;
export declare function createTypographyOptions(options: TypographyOptions): TypographyOptions;
export declare function makeVariant(base: Pick<ThemeTypographyType, "pxToRem" | "fontFamily">, fontWeight: number, size: number, lineHeight: number, letterSpacing: number, casing?: boolean): StyledProps;
export declare function createTypography(options?: DeepPartial<TypographyOptions>): ThemeTypographyType;
//# sourceMappingURL=createTypography.d.ts.map