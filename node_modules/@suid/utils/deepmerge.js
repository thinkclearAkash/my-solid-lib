export function isPlainObject(item) {
    return (item !== null && typeof item === "object" && item.constructor === Object);
}
function sortKeys(object, keys) {
    for (const key of keys) {
        const value = object[key];
        delete object[key];
        object[key] = value;
    }
}
export default function deepmerge(target, source, options = { clone: true }) {
    const output = options.clone ? { ...target } : target;
    const sourceKeys = options.sortKeys ? [] : undefined;
    if (isPlainObject(target) && isPlainObject(source)) {
        Object.keys(source).forEach((key) => {
            // Avoid prototype pollution
            if (key === "__proto__") {
                return;
            }
            if (sourceKeys)
                sourceKeys.push(key);
            let sourceValue;
            let targetValue;
            if (isPlainObject((sourceValue = source[key])) &&
                key in target &&
                isPlainObject((targetValue = target[key]))) {
                // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.
                output[key] = deepmerge(targetValue, sourceValue, options);
            }
            else if (sourceValue !== undefined) {
                output[key] = sourceValue;
            }
        });
        if (sourceKeys)
            sortKeys(output, sourceKeys);
    }
    return output;
}
