import { insert as n, createComponent as t, effect as m, className as u, template as c } from "solid-js/web";
import { Show as o } from "solid-js";
import { DatePickerMonthAndYearSelector as h } from "../DatePickerMonthAndYearSelector/index.js";
import { Button as d } from "../Button/index.js";
import { PrevIcon as p } from "../PrevIcon/index.js";
import { NextIcon as y } from "../NextIcon/index.js";
import { cn as s } from "../../utils/class.js";
import { getRefactoredPrevDate as x, getRefactoredNextDate as b } from "../../utils/generate.js";
import { isNotPartOfEnabledDays as i } from "../../utils/general.js";
var g = c("<div data-type=date-picker-top>");
const N = (e) => {
  return r = g(), n(r, t(o, { get when() {
    return e.prevButtonAreaJSX;
  }, keyed: !0, get children() {
    return e.prevButtonAreaJSX;
  } }), null), n(r, t(o, { get when() {
    return !e.removeNavButtons;
  }, keyed: !0, get children() {
    return t(d, { get class() {
      return s("date-prev-next-btn date-prev-btn rn-text-black disabled:rn-opacity-10 dark:rn-text-white", e.prevMonthBtnClass, e.prevNextMonthBtnClass);
    }, "data-prev": !0, "data-type": "date-prev-next-btn", "aria-label": "Move backward to switch to the previous month", "data-scope": "button", "data-part": "root", get disabled() {
      return (() => {
        if (!e.minDate && !e.enabledDays)
          return !1;
        if (e.minDate && (e.year() < e.minDate.year || e.year() === e.minDate.year && e.month() - 1 < e.minDate.month))
          return !0;
        const { month: a, year: l } = x(e.year(), e.month());
        return i({ enabledDays: e.enabledDays, year: l, month: a, prev: !0 });
      })();
    }, get onClick() {
      return e.handlePrevMonth;
    }, get style() {
      return { ...e.arrowsColor && { color: e.arrowsColor } };
    }, get children() {
      return e.prevIcon || t(p, { get color() {
        return e.arrowsColor;
      } });
    } });
  } }), null), n(r, t(o, { get when() {
    return e.monthYearSelectorJSX;
  }, keyed: !0, get children() {
    return e.monthYearSelectorJSX;
  } }), null), n(r, t(o, { get when() {
    return !e.monthYearSelectorJSX;
  }, keyed: !0, get children() {
    return t(h, e);
  } }), null), n(r, t(o, { get when() {
    return !e.removeNavButtons;
  }, keyed: !0, get children() {
    return t(d, { get class() {
      return s("date-prev-next-btn date-next-btn rn-text-black disabled:rn-opacity-10 dark:rn-text-white", e.nextMonthBtnClass, e.prevNextMonthBtnClass);
    }, "data-next": !0, "aria-label": "Move forward to switch to the next month.", "data-scope": "button", "data-part": "root", "data-type": "date-prev-next-btn", get onClick() {
      return e.handleNextMonth;
    }, get disabled() {
      return (() => {
        if (!e.maxDate && !e.enabledDays)
          return !1;
        if (e.maxDate && (e.year() > e.maxDate.year || e.year() === e.maxDate.year && e.month() + 1 > e.maxDate.month))
          return !0;
        const { year: a, month: l } = b(e.year(), e.month());
        return i({ enabledDays: e.enabledDays, year: a, month: l, next: !0 });
      })();
    }, get style() {
      return { ...e.arrowsColor && { color: e.arrowsColor } };
    }, get children() {
      return e.nextIcon || t(y, { get color() {
        return e.arrowsColor;
      } });
    } });
  } }), null), n(r, t(o, { get when() {
    return e.nextButtonAreaJSX;
  }, keyed: !0, get children() {
    return e.nextButtonAreaJSX;
  } }), null), m(() => u(r, s(`
        date-picker-top 
        rn-mb-[0.3125rem] 
        rn-flex 
        rn-items-center 
        rn-justify-between 
        rn-px-2
      `, e.datePickerTopAreaClass))), r;
  var r;
};
export {
  N as DatePickerTop
};
