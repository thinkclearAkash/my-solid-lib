import { leadingZeros as c } from "./time.js";
const i = (t, a, e = "en-US") => {
  const o = l(t);
  return a = a.replace(new RegExp("(?<!~)(?<!y)yyyy(?!y)", "g"), o.toLocaleString(e, { year: "numeric" })).replace(new RegExp("(?<!~)(?<!y)yy(?!y)", "g"), o.toLocaleString(e, { year: "2-digit" })).replace(new RegExp("(?<!~)(?<!m)m(?!m)", "g"), o.toLocaleString(e, { month: "numeric" })).replace(new RegExp("(?<!~)(?<!m)mm(?!m)", "g"), o.toLocaleString(e, { month: "2-digit" })).replace(new RegExp("(?<!~)(?<!d)dd(?!d)", "g"), o.toLocaleString(e, { day: "2-digit" })).replace(new RegExp("(?<!~)(?<!d)d(?!d)", "g"), o.toLocaleString(e, { day: "numeric" })).replace(new RegExp("(?<!~)(?<!D)DDD(?!D)", "g"), n(o.toLocaleString(e, { weekday: "long" }))).replace(new RegExp("(?<!~)(?<!D)DD(?!D)", "g"), n(o.toLocaleString(e, { weekday: "short" }))).replace(new RegExp("(?<!~)(?<!D)D(?!D)", "g"), n(o.toLocaleString(e, { weekday: "narrow" }))).replace(new RegExp("(?<!~)(?<!M)MMM(?!M)", "g"), o.toLocaleString(e, { month: "long" })).replace(new RegExp("(?<!~)(?<!M)MM(?!M)", "g"), o.toLocaleString(e, { month: "short" })).replace(new RegExp("(?<!~)(?<!M)M(?!M)", "g"), o.toLocaleString(e, { month: "narrow" })).replace(/~y/g, "y").replace(/~m/g, "m").replace(/~M/g, "M").replace(/~d/g, "d").replace(/~D/g, "D");
}, l = (t) => {
  let a;
  return a = typeof t == "string" || typeof t == "number" ? new Date(t) : t instanceof Date ? t : new Date(t.year || 2023, t.month || t.month === 0 ? t.month : 1, t.day), a;
}, y = (t) => ({ year: t.getFullYear(), month: t.getMonth(), day: t.getDate() }), D = (t) => {
  const a = /* @__PURE__ */ new Date(), e = (t == null ? void 0 : t.year) ?? a.getFullYear(), o = (t == null ? void 0 : t.month) === 0 ? 0 : (t == null ? void 0 : t.month) ?? a.getMonth(), r = (t == null ? void 0 : t.day) ?? a.getDate();
  return new Date(e, o, r);
}, p = (t, a) => {
  const { localeOptions: e, locale: o, format: r } = a || {}, g = l(t);
  return m({ date: g, option: e || { month: "short", day: "numeric", year: "numeric" }, locale: o, format: r });
}, m = ({ format: t, option: a, date: e, locale: o }) => t ? i(e, t, o) : e.toLocaleDateString(o ?? "en-US", a), n = (t) => t.startsWith("M") ? "~" + t : t, s = (t) => t === 0 ? 12 : t !== void 0 ? c(t) : "", h = (t) => t !== void 0 ? c(t) : "";
export {
  D as convertDateObjectToDate,
  y as convertDateToDateObject,
  p as formatDate,
  i as formatDateWithString,
  s as formatHourWithLeadingZero,
  h as formatMinuteSecondWithLeadingZero,
  l as getJSDateFormat,
  m as labelFormat
};
