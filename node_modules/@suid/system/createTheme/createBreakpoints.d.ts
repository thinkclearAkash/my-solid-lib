import { SxPropsObject } from "../sxProps";
import { OverridableStringUnion } from "@suid/types";
import { DeepPartial } from "@suid/types";
export interface BreakpointOverrides {
}
export type Breakpoint = OverridableStringUnion<"xs" | "sm" | "md" | "lg" | "xl", BreakpointOverrides>;
export type MediaQueryType<T> = {
    (value: T | number, props?: never): string;
    (value: T | number, props?: SxPropsObject): {
        [K in string as `@media${string}`]: SxPropsObject;
    };
};
export interface Breakpoints<T extends string> extends BreakpointsOptions<T> {
    readonly up: MediaQueryType<T>;
    readonly down: MediaQueryType<T>;
    readonly between: MediaQueryType<[T, T]>;
    readonly resolve: (value: T | number) => number;
}
export type BreakpointsOptions<T extends string> = {
    columns: number;
    keys: T[];
    values: {
        [name in T]: number;
    };
    unit: string;
};
export declare const breakpointsDefault: BreakpointsOptions<Breakpoint>;
export declare function createBreakpointsOptions<T extends string>(options: BreakpointsOptions<T>): BreakpointsOptions<T>;
export declare function createBreakpoints<T extends string>(options?: DeepPartial<BreakpointsOptions<T>>): Breakpoints<T>;
export default createBreakpoints;
//# sourceMappingURL=createBreakpoints.d.ts.map