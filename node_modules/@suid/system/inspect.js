import { createMemo } from "solid-js";
export const $INSPECT = Symbol("solid-inspect");
let inspectionEnabled = false;
export function inspect(fn) {
    try {
        inspectionEnabled = true;
        const result = fn();
        return Array.isArray(result) ? result : [result];
    }
    finally {
        inspectionEnabled = false;
    }
}
export function componentTrap(fn) {
    function Component(props) {
        if (inspectionEnabled)
            return {
                Component,
                props,
                $INSPECT,
            };
        return fn(props);
    }
    Object.defineProperty(Component, "name", {
        value: fn.name,
    });
    Component.toString = fn.toString;
    return Component;
}
export function isComponentObject(input, component) {
    return (!!input &&
        input.$INSPECT === $INSPECT &&
        (!component || input.Component === component));
}
export function resolveChildren(children) {
    if (typeof children === "function" && !children.length)
        return resolveChildren(children());
    if (Array.isArray(children)) {
        const results = [];
        for (let i = 0; i < children.length; i++) {
            const result = resolveChildren(children[i]);
            Array.isArray(result)
                ? // eslint-disable-next-line prefer-spread
                    results.push.apply(results, result)
                : results.push(result);
        }
        return results;
    }
    return children;
}
export function inspectChildren(fn) {
    const children = createMemo(() => inspect(fn));
    const memo = createMemo(() => inspect(() => resolveChildren(children())));
    memo.toArray = () => {
        const c = memo();
        return Array.isArray(c) ? c : c != null ? [c] : [];
    };
    return memo;
}
