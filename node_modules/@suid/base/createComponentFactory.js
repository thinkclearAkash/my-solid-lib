import composeClasses from "./composeClasses";
import useBaseThemeProps from "./useThemeProps";
import { setSuidComponentType } from "@suid/system/createStyled";
import { componentTrap } from "@suid/system/inspect";
import { batch, createComputed, splitProps } from "solid-js";
import { createMutable } from "solid-js/store";
function createComponentFactory() {
    return function (options) {
        function useClasses(ownerState) {
            const haveSlotClasses = !!options.slotClasses;
            const compose = () => {
                if (!options.slotClasses)
                    throw new Error(`'slotClasses' option is not defined`);
                if (!options.utilityClass)
                    throw new Error(`'utilityClass' option is not defined`);
                return composeClasses(options.slotClasses(ownerState), options.utilityClass, ownerState["classes"] ?? "");
            };
            const classes = createMutable({});
            if (haveSlotClasses)
                createComputed(() => {
                    const result = compose();
                    batch(() => {
                        for (const slot in result)
                            classes[slot] = result[slot];
                    });
                });
            return classes;
        }
        function splitInProps(allProps) {
            const [props, otherProps] = splitProps(allProps, options.selfPropNames);
            return { allProps, props, otherProps };
        }
        function useThemeProps(input) {
            return useBaseThemeProps({
                propDefaults: input.propDefaults || options.propDefaults,
                props: input.props,
                name: options.name,
            });
        }
        function useProps(props) {
            const themeProps = useThemeProps({ props });
            return splitInProps(themeProps);
        }
        function defineComponent(cb, styled = true) {
            cb = componentTrap(cb);
            cb.toString = () => `.${options.name}-root`;
            if (styled)
                setSuidComponentType(cb, "base");
            return cb;
        }
        function component(cb) {
            const Component = defineComponent(function Component(inProps) {
                const { allProps, otherProps, props } = useProps(inProps);
                const classes = (options.autoCallUseClasses ?? true)
                    ? useClasses(allProps)
                    : {};
                return cb({
                    allProps,
                    otherProps: otherProps,
                    props,
                    classes,
                });
            });
            Object.defineProperty(Component, "name", { value: cb.name });
            return Component;
        }
        return {
            name: options.name,
            selfPropNames: options.selfPropNames,
            component,
            defineComponent,
            useClasses,
            useThemeProps,
            useProps,
            splitInProps,
        };
    };
}
export default createComponentFactory;
