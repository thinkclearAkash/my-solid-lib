import { Theme } from ".";
import type { ComponentsTypes } from "./components-types";
export declare const skipRootProps: string[];
declare const _default: <C extends import("@suid/types").ElementType, N extends string = string>(Component: C, options?: import("@suid/system/createStyled").StyledOptions<N> | undefined) => <O = N extends keyof ComponentsTypes ? ComponentsTypes[N] extends import("@suid/types").OverridableComponent<infer M2 extends import("@suid/types").OverridableTypeMap> ? import("@suid/types").OverridableInProps<M2> : unknown : C extends import("@suid/types").OverridableComponent<infer M extends import("@suid/types").OverridableTypeMap> ? import("@suid/types").OverridableInProps<M> : unknown>(...styles: (false | import("@suid/system/styledProps").StyledProps | ((props: import("@suid/system/createStyled").ComponentProps<Theme<import("@suid/system/createTheme/createBreakpoints").Breakpoint>, O> & {
    props: N extends keyof ComponentsTypes ? ComponentsTypes[N] extends import("@suid/types").OverridableComponent<infer M3 extends import("@suid/types").OverridableTypeMap> ? import("@suid/types").PropsOf<M3> : import("@suid/types").PropsOf<C> : import("@suid/types").PropsOf<C>;
}) => false | import("@suid/system/styledProps").StyledProps))[]) => C extends import("@suid/types").OverridableComponent<infer M_1 extends import("@suid/types").OverridableTypeMap> ? import("@suid/types").OverridableComponent<{
    defaultComponent: M_1["defaultComponent"];
    props: M_1["props"] & {
        ownerState?: O | undefined;
    };
}> : import("@suid/system/createStyled").StyledComponent<C, O>;
export default _default;
//# sourceMappingURL=styled.d.ts.map