import { Components, ComponentsOptions } from "./createComponents";
import { Mixins } from "./createMixins";
import { Palette, PaletteOptions } from "./createPalette";
import { Shadows } from "./createShadows";
import { ThemeTransitionsType } from "./createTransitions";
import { ThemeTypographyType, TypographyOptions } from "./createTypography";
import { ZIndex, ZIndexOptions } from "./createZIndex";
import { Theme as SysTheme, ThemeOptions as SysThemeOptions } from "@suid/system/createTheme";
import { Breakpoint } from "@suid/system/createTheme/createBreakpoints";
import { DeepPartial } from "@suid/types";
export interface Theme<T extends string = Breakpoint> extends SysTheme<T> {
    components: Components;
    palette: Palette;
    typography: ThemeTypographyType;
    shadows: Shadows;
    transitions: ThemeTransitionsType;
    zIndex: ZIndex;
    direction: "ltr" | "rtl";
    mixins: Mixins;
}
export interface ThemeOptions<T extends string = Breakpoint> extends SysThemeOptions<T> {
    components: ComponentsOptions;
    palette: PaletteOptions;
    typography: TypographyOptions;
    zIndex: ZIndexOptions;
}
export interface ThemeInput<T extends string = Breakpoint> {
    breakpoints: DeepPartial<ThemeOptions<T>["breakpoints"]> | (() => Theme<T>["breakpoints"]);
    shape: DeepPartial<ThemeOptions<T>["shape"]> | (() => Theme<T>["shape"]);
    spacing: DeepPartial<ThemeOptions<T>["spacing"]> | (() => Theme<T>["spacing"]);
    components: DeepPartial<ThemeOptions<T>["components"]> | (() => Theme<T>["components"]);
    palette: DeepPartial<ThemeOptions<T>["palette"]> | (() => Theme<T>["palette"]);
    typography: DeepPartial<ThemeOptions<T>["typography"]> | (() => Theme<T>["typography"]);
    shadows: () => Theme<T>["shadows"];
    transitions: () => Theme<T>["transitions"];
    zIndex: DeepPartial<ThemeOptions<T>["zIndex"]> | (() => Theme<T>["zIndex"]);
    direction: () => Theme<T>["direction"];
    mixins: () => Theme<T>["mixins"];
}
export declare function createThemeOptions<T extends string>(options: Partial<ThemeOptions<T>>): Partial<ThemeOptions<T>>;
export declare function createTheme<T extends string = Breakpoint>(input?: Partial<ThemeInput<T>>): Theme<T>;
export default createTheme;
//# sourceMappingURL=createTheme.d.ts.map