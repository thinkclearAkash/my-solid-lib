import getThemeValue from "./getThemeValue";
import { createUnaryUnit } from "./spacing";
const dirMap = {
    x: ["Left", "Right"],
    y: ["Top", "Bottom"],
};
function asPx(value) {
    return typeof value === "number" ? `${value}px` : value;
}
function customProp(name, onValue) {
    return (value, theme) => onValue(name, value, theme);
}
function prop(name, onValue) {
    return onValue
        ? (value, theme) => ({
            [name]: onValue(name, value, theme),
        })
        : (value) => ({ [name]: value });
}
function pxProp(name) {
    return prop(name, (name, value) => asPx(value));
}
function mProp(name, suffix, onValue) {
    const names = suffix.map((v) => `${name}${v}`);
    return onValue
        ? (value, theme) => names.reduce((result, name) => {
            result[name] = onValue(name, value, theme);
            return result;
        }, {})
        : (value) => names.reduce((result, name) => {
            result[name] = value;
            return result;
        }, {});
}
function createSystemProps() {
    return {
        ...createSystemDisplayProps(),
        ...createSystemFlexboxProps(),
        ...createSystemGridProps(),
        ...createSystemPositionProps(),
        ...createSystemPaletteProps(),
        ...createSystemSizingProps(),
        ...createSystemBorderProps(),
        ...createSystemSpacingProps(),
        ...createSystemTypographyProps(),
    };
}
export function createSystemDisplayProps() {
    return {
        displayPrint: customProp("displayPrint", (name, display) => ({
            "@media print": {
                display,
            },
        })),
        displayRaw: prop("display"),
        overflow: prop("overflow"),
        textOverflow: prop("textOverflow"),
        visibility: prop("visibility"),
        whiteSpace: prop("whiteSpace"),
    };
}
export function createSystemFlexboxProps() {
    return {
        flexBasis: prop("flexBasis"),
        flexDirection: prop("flexDirection"),
        flexWrap: prop("flexWrap"),
        justifyContent: prop("justifyContent"),
        alignItems: prop("alignItems"),
        alignContent: prop("alignContent"),
        order: prop("order"),
        flex: prop("flex"),
        flexGrow: prop("flexGrow"),
        flexShrink: prop("flexShrink"),
        alignSelf: prop("alignSelf"),
        justifyItems: prop("justifyItems"),
        justifySelf: prop("justifySelf"),
    };
}
export function createSystemGridProps() {
    const spacing = (name, value, theme) => createUnaryUnit(theme, "spacing", 8, name)(value);
    return {
        gap: prop("gap", spacing),
        columnGap: prop("columnGap", spacing),
        rowGap: prop("rowGap", spacing),
        gridColumn: prop("gridColumn"),
        gridRow: prop("gridRow"),
        gridAutoFlow: prop("gridAutoFlow"),
        gridAutoColumns: prop("gridAutoColumns"),
        gridAutoRows: prop("gridAutoRows"),
        gridTemplateColumns: prop("gridTemplateColumns"),
        gridTemplateRows: prop("gridTemplateRows"),
        gridTemplateAreas: prop("gridTemplateAreas"),
        gridArea: prop("gridArea"),
    };
}
export function createSystemPositionProps() {
    return {
        position: prop("position"),
        zIndex: prop("zIndex", (name, value, theme) => theme.zIndex?.[name] ?? value),
        top: pxProp("top"),
        right: pxProp("right"),
        bottom: pxProp("bottom"),
        left: pxProp("left"),
    };
}
export function createSystemPaletteProps() {
    const paletteValue = (name, value, theme) => getThemeValue(theme, "palette", value);
    return {
        color: prop("color", paletteValue),
        bgcolor: prop("backgroundColor", paletteValue),
        backgroundColor: prop("backgroundColor", paletteValue),
    };
}
export function createSystemSizingProps() {
    const onValue = (name, value, theme) => {
        if (name === "maxWidth") {
            value = theme.breakpoints.values[name] ?? value;
        }
        if (typeof value === "number") {
            value = value > 0 && value <= 1 ? `${value * 100}%` : `${value}px`;
        }
        return value;
    };
    return {
        width: prop("width", onValue),
        maxWidth: prop("maxWidth", onValue),
        minWidth: prop("minWidth", onValue),
        height: prop("height", onValue),
        maxHeight: prop("maxHeight", onValue),
        minHeight: prop("minHeight", onValue),
        boxSizing: prop("boxSizing", onValue),
    };
}
export function createSystemBorderProps() {
    const borderValue = (name, value) => typeof value === "number" ? `${value}px solid` : value;
    const paletteValue = (name, value, theme) => getThemeValue(theme, "palette", value);
    return {
        border: prop("border", borderValue),
        borderTop: prop("borderTop", borderValue),
        borderRight: prop("borderRight", borderValue),
        borderBottom: prop("borderBottom", borderValue),
        borderLeft: prop("borderLeft", borderValue),
        borderColor: prop("borderColor", paletteValue),
        borderTopColor: prop("borderTopColor", paletteValue),
        borderRightColor: prop("borderRightColor", paletteValue),
        borderBottomColor: prop("borderBottomColor", paletteValue),
        borderLeftColor: prop("borderLeftColor", paletteValue),
        borderRadius: prop("borderRadius", (name, value, theme) => typeof value === "number"
            ? `${theme.shape.borderRadius * value}px`
            : value),
    };
}
export function createSystemTypographyProps() {
    const typographyValue = (name, value, theme) => getThemeValue(theme, "typography", value);
    return {
        typography: customProp("typography", (name, value, theme) => getThemeValue(theme, "typography", value)),
        fontFamily: prop("fontFamily", typographyValue),
        fontSize: prop("fontSize", (name, value, theme) => asPx(typographyValue(name, value, theme))),
        fontStyle: prop("fontStyle", typographyValue),
        fontWeight: prop("fontWeight", typographyValue),
        letterSpacing: pxProp("letterSpacing"),
        lineHeight: prop("lineHeight"),
        textAlign: prop("textAlign"),
        textTransform: prop("textTransform"),
    };
}
export function createSystemSpacingProps() {
    const spacing = (name, value, theme) => theme.spacing(value);
    const m = "margin";
    const p = "padding";
    return {
        m: prop(m, spacing),
        mt: prop("marginTop", spacing),
        mr: prop("marginRight", spacing),
        mb: prop("marginBottom", spacing),
        ml: prop("marginLeft", spacing),
        mx: mProp(m, dirMap["x"], spacing),
        my: mProp(m, dirMap["y"], spacing),
        margin: prop(m, spacing),
        marginTop: prop("marginTop", spacing),
        marginRight: prop("marginRight", spacing),
        marginBottom: prop("marginBottom", spacing),
        marginLeft: prop("marginLeft", spacing),
        marginX: mProp(m, dirMap["x"], spacing),
        marginY: mProp(m, dirMap["y"], spacing),
        marginInline: mProp(m, ["Inline", "InlineStart"], spacing),
        marginInlineStart: prop("marginInlineStart", spacing),
        marginInlineEnd: prop("marginInlineEnd", spacing),
        marginBlock: mProp(m, ["BlockStart", "BlockEnd"], spacing),
        marginBlockStart: prop("marginBlockStart", spacing),
        marginBlockEnd: prop("marginBlockEnd", spacing),
        p: prop(p, spacing),
        pt: prop("paddingTop", spacing),
        pr: prop("paddingRight", spacing),
        pb: prop("paddingBottom", spacing),
        pl: prop("paddingLeft", spacing),
        px: mProp(p, dirMap["x"], spacing),
        py: mProp(p, dirMap["y"], spacing),
        padding: prop(p, spacing),
        paddingTop: prop("paddingTop", spacing),
        paddingRight: prop("paddingRight", spacing),
        paddingBottom: prop("paddingBottom", spacing),
        paddingLeft: prop("paddingLeft", spacing),
        paddingX: mProp(p, dirMap["x"], spacing),
        paddingY: mProp(p, dirMap["y"], spacing),
        paddingInline: mProp(p, ["Inline", "InlineStart"], spacing),
        paddingInlineStart: prop("paddingInlineStart", spacing),
        paddingInlineEnd: prop("paddingInlineEnd", spacing),
        paddingBlock: mProp(p, ["BlockStart", "BlockEnd"], spacing),
        paddingBlockStart: prop("paddingBlockStart", spacing),
        paddingBlockEnd: prop("paddingBlockEnd", spacing),
    };
}
export default createSystemProps;
