import { isNotPartOfEnabledDays as h } from "./general.js";
import { getOnChangeSingleData as d } from "./generate.js";
const f = (a, i, e) => {
  var t, s;
  return e.useValueAsName ? ((t = e.option) == null ? void 0 : t.call(e)) === Number(a) : ((s = e.option) == null ? void 0 : s.call(e)) === i();
}, g = (a, i, e) => {
  var t, s, m, y, o, D, l, n, u, p;
  if (e.useValueAsName) {
    if (e.minDate || e.maxDate)
      return !!((t = e.minDate) != null && t.year) && Number(a) < ((s = e.minDate) == null ? void 0 : s.year) || !!((m = e.maxDate) != null && m.year) && Number(a) > ((y = e.maxDate) == null ? void 0 : y.year);
    if (e.enabledDays)
      return e.enabledDays.every((b) => "start" in b && "end" in b ? b.start.year !== Number(a) || b.end.year !== Number(a) : b.year !== Number(a));
  } else {
    if (e.minDate || e.maxDate)
      return !!e.minDate && (e.minDate.year === ((o = e.year) == null ? void 0 : o.call(e)) && i() < e.minDate.month || ((D = e.minDate) == null ? void 0 : D.year) > (((l = e.year) == null ? void 0 : l.call(e)) || 0)) || !!e.maxDate && e.maxDate.year === ((n = e.year) == null ? void 0 : n.call(e)) && i() > e.maxDate.month;
    if (e.enabledDays && ((u = e.year) != null && u.call(e)))
      return h({ year: (p = e.year) == null ? void 0 : p.call(e), month: i(), enabledDays: e.enabledDays });
  }
  return !1;
}, O = (a, i, e, t) => {
  var s, m, y, o, D, l;
  if (e.useValueAsName) {
    const n = Number(i);
    (s = e.setOption) == null || s.call(e, n), (m = e.onYearChange) == null || m.call(e, n);
    const u = d({ startDay: e.startDay, year: n, type: e.type || "single" });
    u && ((y = e.onChange) == null || y.call(e, u));
  } else {
    (o = e.setOption) == null || o.call(e, a), (D = e.onMonthChange) == null || D.call(e, a);
    const n = d({ startDay: e.startDay, month: a, type: e.type || "single" });
    n && ((l = e.onChange) == null || l.call(e, n));
  }
  t == null || t();
};
export {
  O as handleSelectorOptionClick,
  g as isOptionDisabledOnSelector,
  f as isOptionSelectedOnSelector
};
