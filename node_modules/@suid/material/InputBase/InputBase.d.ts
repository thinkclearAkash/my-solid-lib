import { FormControlState } from "../FormControl/FormControlContext";
import { InputBaseTypeMap } from "./InputBaseProps";
import { InPropsOf } from "@suid/types";
export type OwnerState = InPropsOf<InputBaseTypeMap> & {
    error?: boolean;
    focused: boolean;
    formControl?: FormControlState;
    hiddenLabel?: boolean;
    color: string;
};
export declare const rootOverridesResolver: (props: {
    ownerState: OwnerState;
}, styles: Record<string, string>) => (string | false)[];
export declare const inputOverridesResolver: (props: {
    ownerState: OwnerState;
}, styles: Record<string, string>) => (string | false)[];
export declare const InputBaseRoot: import("@suid/system/createStyled").StyledComponent<"div", OwnerState>;
export declare const InputBaseComponent: import("@suid/system/createStyled").StyledComponent<"input", OwnerState>;
/**
 * `InputBase` contains as few styles as possible.
 * It aims to be a simple building block for creating an input.
 * It contains a load of style reset and some state logic.
 *
 * Demos:
 *
 * - [Text Fields](https://mui.com/components/text-fields/)
 *
 * API:
 *
 * - [InputBase API](https://mui.com/api/input-base/)
 */
declare const InputBase: import("@suid/types").OverridableComponent<InputBaseTypeMap<{}, "div">>;
export default InputBase;
//# sourceMappingURL=InputBase.d.ts.map