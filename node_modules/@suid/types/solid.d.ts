/**
 * @source https://github.com/DefinitelyTyped/DefinitelyTyped/blob/3198434bf6a22f1a541e065ff54564a9a72aff69/types/react/index.d.ts
 */
import { JSX, Component, ComponentProps } from "solid-js";
export {};
export type ElementType = Component<any> | keyof JSX.IntrinsicElements;
export type Ref<T> = ((ref: T) => void) | null;
export interface RefAttributes<T> {
    ref?: Ref<T> | undefined;
}
/** Ensures that the props do not include ref at all */
export type PropsWithoutRef<P> = P extends any ? "ref" extends keyof P ? Pick<P, Exclude<keyof P, "ref">> : P : P;
/** Ensures that the props do not include string ref, which cannot be forwarded */
export type PropsWithRef<P> = "ref" extends keyof P ? P extends {
    ref?: infer R | undefined;
} ? string extends R ? PropsWithoutRef<P> & {
    ref?: Exclude<R, string> | undefined;
} : P : P : P;
export type ComponentPropsWithRef<T extends ElementType> = PropsWithRef<ComponentProps<T>>;
export type JSXElementConstructor<P> = (props: P) => JSX.Element | null;
//# sourceMappingURL=solid.d.ts.map