import { convertDateObjectToDate as c } from "./format.js";
import { getToday as w, getDatePickerRefactoredYear as D, getDatePickerRefactoredMonth as u } from "./generate.js";
const x = ({ day: e, endDate: a, startDate: n, year: t, month: o, monthStatus: y }) => {
  if (!n || !a)
    return !1;
  const d = new Date(D(t, o, y), u(o, y), e), h = new Date(n.year, n.month, n.day), s = new Date(a.year, a.month, a.day);
  return d > h && d < s;
}, M = ({ dateRange: e, day: a, year: n, month: t, monthStatus: o }) => {
  if (!e)
    return !1;
  const y = new Date(D(n, t, o), u(t, o), a), d = new Date(e.year, e.month, e.day);
  return y.getTime() === d.getTime();
}, k = (e) => {
  const a = w();
  return e instanceof Date ? e.getDate() === a.day && e.getMonth() === a.month && e.getFullYear() === a.year : e.day === a.day && e.month === a.month && e.year === a.year;
}, S = ({ maxDate: e, minDate: a, day: n, year: t, month: o }) => {
  if (!a && !e)
    return !1;
  const y = new Date(D(t(), o(), n.month), u(o(), n.month), n.value);
  if (a && e) {
    const d = new Date(a.year, a.month, a.day), h = new Date(e.year, e.month, e.day);
    return y < d || y > h;
  }
  return a ? y < new Date(a.year, a.month, a.day) : e ? y > new Date(e.year, e.month, e.day) : !1;
}, b = ({ disabledDays: e, month: a, day: n, year: t }) => e ? !!e.find((o) => {
  if ("start" in o && "end" in o) {
    const y = c(o.start), d = c(o.end), h = c({ day: n.value, month: u(a, n.month), year: D(t, a, n.month) });
    return h >= y && h <= d;
  }
  return o.day === n.value && o.month === u(a, n.month) && o.year === D(t, a, n.month);
}) : !1, p = ({ enabledDays: e, day: a, year: n, month: t, next: o, prev: y }) => !!e && e.every((d) => {
  const h = a ? { day: a.value, month: u(t, a.month), year: D(n, t, a.month) } : { year: n, month: t };
  if ("start" in d && "end" in d) {
    if (function(r, m, i, f) {
      if (f != null && f.next)
        return m.year === void 0 || r.year === void 0 || m.year > r.year || r.year === m.year && (r.month === void 0 || m.month === void 0 || m.month >= r.month);
      if (f != null && f.prev)
        return i.year === void 0 || r.year === void 0 || i.year < r.year || r.year === i.year && (r.month === void 0 || i.month === void 0 || i.month <= r.month);
      const g = m.year === void 0 || r.year === void 0 || r.year > m.year || r.year === m.year && (r.month === void 0 || m.month === void 0 || r.month > m.month || r.month === m.month && (!r.day || m.day === void 0 || r.day >= m.day)), l = i.year === void 0 || r.year === void 0 || r.year < i.year || r.year === i.year && (r.month === void 0 || i.month === void 0 || r.month < i.month || r.month === i.month && (!r.day || i.day === void 0 || r.day <= i.day));
      return g && l;
    }(h, d.start, d.end, { next: o, prev: y }))
      return !1;
  } else if (v = d, (s = h).day ? s.year === v.year && s.month === v.month && s.day === v.day : s.year === v.year && s.month === v.month)
    return !1;
  var s, v;
  return !0;
}), O = (e, a, n) => {
  for (let t = new Date(e); t <= a; t.setDate(t.getDate() + 1))
    if (b({ day: { month: "current", value: t.getDate() }, month: t.getMonth(), year: t.getFullYear(), disabledDays: n }))
      return !0;
  return !1;
}, P = (e, a, n) => {
  for (let t = new Date(e); t <= a; t.setDate(t.getDate() + 1))
    if (p({ day: { month: "current", value: t.getDate() }, month: t.getMonth(), year: t.getFullYear(), enabledDays: n }))
      return !0;
}, Y = ({ year: e, month: a, day: n }) => {
  const t = u(a, n.month), o = D(e, a, n.month), y = new Date(o, t, n.value).getDay();
  return { isWeekend: y === 0 || y === 6, isSaturday: y === 6, isSunday: y === 0 };
}, F = (e, a) => e.day === a.day && e.month === a.month && e.year === a.year, I = (e, a) => {
  const n = e instanceof Date ? e : c(e), t = a instanceof Date ? a : c(a);
  return n.getTime() < t.getTime();
};
export {
  k as checkIfItsTodayDate,
  F as compareObjectDate,
  I as isBeforeDate,
  O as isDateRangeDisabled,
  P as isDateRangeEnabled,
  x as isDayInBetweenRange,
  M as isDayTipRange,
  S as isMinMaxDate,
  p as isNotPartOfEnabledDays,
  b as isPartOfDisabledDays,
  Y as isWeekendStatus
};
