import { insert as l, createComponent as t, mergeProps as i, effect as m, className as D, template as c } from "solid-js/web";
import { For as o } from "solid-js";
import { DatePickerDay as h } from "../DatePickerDay/index.js";
import { DatePickerWeek as n } from "../DatePickerWeek/index.js";
import { createDaysArray as u, dayRowsArray as p } from "../../hooks/createDaysArray.js";
import { applyDateRangeProps as g } from "../../utils/dayProps.js";
import { cn as s } from "../../utils/class.js";
var C = c("<div data-type=calendar-days-area data-scope=date-picker>");
const H = (e) => {
  return u({ month: e.month, year: e.year, weekStartDay: e.weekStartDay }), r = C(), l(r, t(o, { get each() {
    return p();
  }, children: (d, y) => t(n, { get daysRowClass() {
    var a;
    return s({ "rn-hidden": ((a = e.showSelectorTwo) == null ? void 0 : a.call(e)) && y() > 0 }, e.daysRowClass);
  }, get children() {
    return t(o, { each: d, children: (a) => t(h, i(() => ({ ...e, calendarWeekDaysNameClass: void 0 }), () => g({ year: e.year, day: a, month: e.month, startDay: e.startDay(), endDay: e.endDay(), customDaysClassName: e.customDaysClassName, multipleObject: e.multipleObject(), hideOutSideDays: e.hideOutSideDays, hoverRangeValue: e.hoverRangeValue, enabledDays: e.enabledDays, minDate: e.minDate, maxDate: e.maxDate, disabledDays: e.disabledDays }), { onClick: () => e.handleDayClick(a, e.month, e.year, e.nextMonth || !1), onHover: () => e.onHoverDay(a, e.month, e.year, e.nextMonth || !1), onHoverEnd: () => e.onHoverDayEnd(a, e.month, e.year, e.nextMonth || !1), get primaryColor() {
      return e.primaryColor;
    }, get primaryTextColor() {
      return e.primaryTextColor;
    }, get secondaryColor() {
      return e.secondaryColor;
    }, get secondaryTextColor() {
      return e.secondaryTextColor;
    }, get disabledDays() {
      return e.disabledDays;
    }, get shouldHighlightWeekends() {
      return e.shouldHighlightWeekends;
    }, get onDisabledDayError() {
      return e.onDisabledDayError;
    }, get hoverRangeValue() {
      return e.hoverRangeValue;
    }, get children() {
      return a.value;
    } })) });
  } }) })), m(() => D(r, s("date-picker-calendar-days-area", e.datePickerCalendarDaysArea))), r;
  var r;
};
export {
  H as CalendarDays
};
