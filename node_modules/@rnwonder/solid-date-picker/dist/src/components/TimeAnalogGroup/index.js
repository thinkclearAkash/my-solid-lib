import { insert as n, createComponent as t, mergeProps as A, effect as I, className as O, template as J } from "solid-js/web";
import { createSignal as s, onMount as W, createEffect as q, Show as d } from "solid-js";
import { TimeAnalog as E } from "../TimeAnalog/index.js";
import { TimeAnalogGroupTop as z } from "../TimeAnalogGroupTop/index.js";
import { TimeAnalogBottom as D } from "../TimeAnalogBottom/index.js";
import { convert12HourTo24Hour as F } from "../../utils/time.js";
import { cn as K } from "../../utils/class.js";
var H = J("<div data-type=custom-jsx>"), L = J('<div><div class="rn-flex rn-flex-row"><div>');
const ee = (e) => {
  const [o, i] = s("hour"), [l, N] = s(["hour", "minute"]), [w, g] = s("AM"), [v, P] = s(), [V, X] = s(), [T, B] = s(), [G, j] = s();
  W(() => {
    var r, u, m, f, y;
    e.allowedView && N(e.allowedView), !((r = e.allowedView) != null && r.includes("hour")) && ((u = e.allowedView) != null && u.includes("minute")) && i("minute"), (m = e.allowedView) != null && m.includes("hour") || (f = e.allowedView) != null && f.includes("minute") || !((y = e.allowedView) != null && y.includes("second")) || i("second");
  }), q(() => {
    j({ hour: v() !== void 0 ? F(v(), w()) : void 0, minute: V(), second: T() });
  });
  const S = () => {
    var r;
    o() === "hour" && l().includes("minute") ? i("minute") : o() === "minute" && l().includes("second") ? i("second") : e.shouldCloseOnSelect && ((r = e.setIsShown) == null || r.call(e, !1));
  }, b = () => {
    o() === "second" && l().includes("minute") ? i("minute") : o() === "minute" && l().includes("hour") && i("hour");
  }, p = (r) => {
    if (r) {
      if (typeof r == "function") {
        const f = r({ handleNext: S, handlePrev: b, setView: i, view: o, meridiem: w, setMeridiem: g, time: G });
        return u = H(), n(u, f), u;
      }
      var u, m;
      return m = H(), n(m, r), m;
    }
  }, x = p(e.topAreaJSX), C = p(e.bottomAreaJSX), M = p(e.leftAreaJSX), k = p(e.rightAreaJSX);
  return a = L(), c = a.firstChild, h = c.firstChild, n(a, t(d, { when: x, children: x }), c), n(c, t(d, { when: M, children: M }), h), n(h, t(d, { get when() {
    return !e.hideTopArea;
  }, get children() {
    return t(z, A(e, { view: o, get allowedView() {
      return l();
    }, handleNext: S, handlePrev: b }));
  } }), null), n(h, t(E, A(e, { get allowedView() {
    return l();
  }, view: o, setView: i, handleNext: S, meridiem: w, get handleTimeChange() {
    return e.handleTimeChange;
  }, setMeridiem: g, selectedHour: v, selectedMinute: V, selectedSeconds: T, setSelectedHour: P, setSelectedMinute: X, setSelectedSeconds: B })), null), n(h, t(d, { get when() {
    return l().includes("hour") && !e.hideBottomArea;
  }, keyed: !0, get children() {
    return t(D, A(e, { meridiem: w, setMeridiem: g }));
  } }), null), n(c, t(d, { when: k, children: k }), null), n(a, t(d, { when: C, children: C }), null), I(() => O(a, K(` 
          time-picker-wrapper 
          rn-rounded-md 
          rn-border-t 
          rn-border-solid 
          rn-border-gray-300
          rn-bg-white
          rn-px-[1rem]
          rn-pb-[0.5rem] 
          rn-pt-[0.625rem] 
          rn-shadow-lg 
          dark:rn-border-gray-700
          dark:rn-bg-dreamless-sleep
          `, e.timePickerWrapperClass))), a;
  var a, c, h;
};
export {
  ee as TimeAnalogGroup
};
