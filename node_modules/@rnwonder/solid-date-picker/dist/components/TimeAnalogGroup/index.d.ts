import { Accessor, JSX, Setter } from "solid-js";
import { ITimePickerAnalog } from "../TimeAnalog";
import { TimeMeridiem, ITimePickerFormat, TimeView } from "../../interface/general";
interface IRenderTimeJSXProps {
    view: Accessor<TimeView>;
    setView: Setter<TimeView>;
    meridiem: Accessor<TimeMeridiem>;
    setMeridiem: Setter<TimeMeridiem>;
    handleNext: () => void;
    handlePrev: () => void;
    time: Accessor<ITimePickerFormat | undefined>;
}
export type IRenderTimeJSX = JSX.Element | ((props: IRenderTimeJSXProps) => JSX.Element);
export interface ITimeAnalogGroupProps extends Omit<ITimePickerAnalog, "view" | "handleNext" | "setView" | "allowedView" | "meridiem" | "setTime" | "time" | "setMeridiem" | "selectedMinute" | "selectedSeconds" | "selectedHour" | "setSelectedMinute" | "setSelectedHour" | "setSelectedSeconds"> {
    allowedView?: TimeView[];
    arrowsColor?: string;
    prevIcon?: JSX.Element;
    nextIcon?: JSX.Element;
    setIsShown: Setter<boolean>;
    shouldCloseOnSelect?: boolean;
    hideTopArea?: boolean;
    hideBottomArea?: boolean;
    setAllowedComponents?: Setter<HTMLElement[]>;
    topAreaJSX?: IRenderTimeJSX;
    bottomAreaJSX?: IRenderTimeJSX;
    leftAreaJSX?: IRenderTimeJSX;
    rightAreaJSX?: IRenderTimeJSX;
}
export declare const TimeAnalogGroup: (props: ITimeAnalogGroupProps) => JSX.Element;
export {};
