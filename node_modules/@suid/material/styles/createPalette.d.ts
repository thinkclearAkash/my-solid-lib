import { common, grey } from "../colors";
import { DeepPartial, DoRequired } from "@suid/types";
export type PaletteColorOptions = {
    light: string;
    main: string;
    dark: string;
    contrastText?: string;
};
export type PaletteColor = Required<PaletteColorOptions>;
export type PaletteColorName = "primary" | "secondary" | "error" | "warning" | "info" | "success";
type PaletteBase = Omit<PaletteOptions, PaletteColorName> & {
    [color in PaletteColorName]: PaletteColor;
};
export interface Palette extends PaletteBase {
    getColorObject(name: PaletteColorName): PaletteColor;
    getColor(name: PaletteColorName): string;
    isColorName(name: string): name is PaletteColorName;
    augmentColor(data: {
        color: PaletteColor;
        mainShade?: number | string;
        lightShade?: number | string;
        darkShade?: number | string;
    }): PaletteColor;
    getContrastText(color: string): string;
}
export interface PaletteOptions {
    mode: "light" | "dark";
    primary: PaletteColorOptions;
    secondary: PaletteColorOptions;
    error: PaletteColorOptions;
    warning: PaletteColorOptions;
    info: PaletteColorOptions;
    success: PaletteColorOptions;
    text: {
        primary: string;
        secondary: string;
        disabled: string;
    };
    background: {
        paper: string;
        default: string;
    };
    contrastThreshold: number;
    tonalOffset: number | {
        light: number;
        dark: number;
    };
    divider: string;
    common: typeof common;
    action: {
        active: string;
        hover: string;
        hoverOpacity: number;
        selected: string;
        selectedOpacity: number;
        disabled: string;
        disabledOpacity: number;
        disabledBackground: string;
        focus: string;
        focusOpacity: number;
        activatedOpacity: number;
    };
    grey: typeof grey;
}
export declare const useLightOptions: () => Partial<PaletteOptions>;
export declare const lightColors: Pick<PaletteOptions, PaletteColorName>;
export declare const useDarkOptions: () => Partial<PaletteOptions>;
export declare const darkColors: Pick<PaletteOptions, PaletteColorName>;
export declare const usePalleteDefaults: () => DoRequired<Partial<PaletteOptions>, "mode">;
export declare function createPaletteOptions(data: Partial<PaletteOptions>): Partial<PaletteOptions>;
export declare function createPalette(options?: DeepPartial<PaletteOptions>): Palette;
export {};
//# sourceMappingURL=createPalette.d.ts.map