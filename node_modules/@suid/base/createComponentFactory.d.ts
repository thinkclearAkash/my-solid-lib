import { PropDefaultsCb, ThemePropOptions } from "./useThemeProps";
import { InPropsOf, PropsOf, OverridableComponent, OverridableTypeMap, SuidComponentType, SuidElement } from "@suid/types";
import { JSXElement } from "solid-js";
declare function createComponentFactory<C extends SuidComponentType, O = InPropsOf<C>>(): <S extends Record<string, (string | false | undefined)[]>>(options: {
    name: NonNullable<C["name"]>;
    selfPropNames: Exclude<keyof C["selfProps"], "sx">[];
    propDefaults?: PropDefaultsCb<C> | undefined;
    utilityClass?: ((slot: string) => string) | undefined;
    slotClasses?: ((ownerState: O) => S) | undefined;
    /**
     * @default true
     */
    autoCallUseClasses?: boolean | undefined;
}) => {
    name: NonNullable<C["name"]>;
    selfPropNames: Exclude<keyof C["selfProps"], "sx">[];
    component: (cb: (data: {
        allProps: InPropsOf<C>;
        props: Pick<InPropsOf<C>, Exclude<keyof C["selfProps"], "sx">>;
        otherProps: Omit<InPropsOf<C>, Exclude<keyof C["selfProps"], "sx">>;
        classes: { [K in keyof S]: string; };
    }) => JSXElement) => C extends OverridableTypeMap ? OverridableComponent<C> : SuidElement<C>;
    defineComponent: (cb: (props: PropsOf<C>) => JSXElement, styled?: boolean) => C extends OverridableTypeMap ? OverridableComponent<C> : SuidElement<C>;
    useClasses: (ownerState: O) => Readonly<{ [K_1 in keyof S]: string; }>;
    useThemeProps: (input: Omit<ThemePropOptions<C>, "name">) => InPropsOf<C>;
    useProps: (props: PropsOf<C>) => {
        allProps: InPropsOf<C>;
        props: Pick<InPropsOf<C>, Extract<Exclude<keyof C["selfProps"], "sx">[], readonly (keyof InPropsOf<C>)[]>[number]>;
        otherProps: InPropsOf<C> extends infer T ? { [P in keyof T as Exclude<P, Exclude<keyof C["selfProps"], "sx">>]: InPropsOf<C>[P]; } : never;
    };
    splitInProps: (allProps: InPropsOf<C>) => {
        allProps: InPropsOf<C>;
        props: Pick<InPropsOf<C>, Extract<Exclude<keyof C["selfProps"], "sx">[], readonly (keyof InPropsOf<C>)[]>[number]>;
        otherProps: InPropsOf<C> extends infer T ? { [P in keyof T as Exclude<P, Exclude<keyof C["selfProps"], "sx">>]: InPropsOf<C>[P]; } : never;
    };
};
export default createComponentFactory;
//# sourceMappingURL=createComponentFactory.d.ts.map