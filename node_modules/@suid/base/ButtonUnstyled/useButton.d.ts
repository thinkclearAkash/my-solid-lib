import UseButtonProps, { UseButtonHandlers } from "./UseButtonProps";
import { EventParam } from "@suid/types";
export default function useButton(props: UseButtonProps): {
    getRootProps: (otherHandlers?: UseButtonHandlers) => {
        [x: string]: unknown;
        tabIndex: unknown;
        type: unknown;
        onBlur: (event: EventParam<any, FocusEvent>) => void;
        onFocus: (event: EventParam<HTMLButtonElement, FocusEvent>) => void;
        onKeyDown: (event: EventParam<any, KeyboardEvent>) => void;
        onKeyUp: (event: EventParam<any, KeyboardEvent>) => void;
        onMouseDown: (event: EventParam<HTMLButtonElement, MouseEvent>) => void;
        onMouseLeave: (event: EventParam<any, MouseEvent>) => void;
        onMouseUp: (event: EventParam<HTMLButtonElement, MouseEvent>) => void;
        ref: (instance: HTMLElement | null) => void;
    };
    readonly focusVisible: boolean;
    setFocusVisible: import("solid-js").Setter<boolean>;
    readonly disabled: boolean | undefined;
    readonly active: import("solid-js").Accessor<boolean>;
};
//# sourceMappingURL=useButton.d.ts.map