import { Theme } from "./createTheme";
import { StyledPropsBase } from "./styledProps";
declare const systemProps: {
    typography: (value: string, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    fontFamily: (value: import("csstype").Property.FontFamily, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    fontSize: (value: import("csstype").Property.FontSize<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    fontStyle: (value: import("csstype").Property.FontStyle, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    fontWeight: (value: import("csstype").Property.FontWeight, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    letterSpacing: (value: import("csstype").Property.LetterSpacing<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    lineHeight: (value: import("csstype").Property.LineHeight<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    textAlign: (value: import("csstype").Property.TextAlign, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    textTransform: (value: import("csstype").Property.TextTransform, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    m: (value: import("csstype").Property.Margin<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    mt: (value: import("csstype").Property.MarginTop<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    mr: (value: import("csstype").Property.MarginRight<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    mb: (value: import("csstype").Property.MarginBottom<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    ml: (value: import("csstype").Property.MarginLeft<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    mx: (value: unknown, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    my: (value: unknown, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    margin: (value: import("csstype").Property.Margin<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    marginTop: (value: import("csstype").Property.MarginTop<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    marginRight: (value: import("csstype").Property.MarginRight<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    marginBottom: (value: import("csstype").Property.MarginBottom<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    marginLeft: (value: import("csstype").Property.MarginLeft<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    marginX: (value: unknown, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    marginY: (value: unknown, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    marginInline: (value: unknown, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    marginInlineStart: (value: import("csstype").Property.MarginInlineStart<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    marginInlineEnd: (value: import("csstype").Property.MarginInlineEnd<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    marginBlock: (value: unknown, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    marginBlockStart: (value: import("csstype").Property.MarginBlockStart<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    marginBlockEnd: (value: import("csstype").Property.MarginBlockEnd<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    p: (value: import("csstype").Property.Padding<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    pt: (value: import("csstype").Property.PaddingTop<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    pr: (value: import("csstype").Property.PaddingRight<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    pb: (value: import("csstype").Property.PaddingBottom<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    pl: (value: import("csstype").Property.PaddingLeft<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    px: (value: unknown, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    py: (value: unknown, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    padding: (value: import("csstype").Property.Padding<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    paddingTop: (value: import("csstype").Property.PaddingTop<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    paddingRight: (value: import("csstype").Property.PaddingRight<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    paddingBottom: (value: import("csstype").Property.PaddingBottom<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    paddingLeft: (value: import("csstype").Property.PaddingLeft<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    paddingX: (value: unknown, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    paddingY: (value: unknown, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    paddingInline: (value: unknown, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    paddingInlineStart: (value: import("csstype").Property.PaddingInlineStart<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    paddingInlineEnd: (value: import("csstype").Property.PaddingInlineEnd<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    paddingBlock: (value: unknown, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    paddingBlockStart: (value: import("csstype").Property.PaddingBlockStart<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    paddingBlockEnd: (value: import("csstype").Property.PaddingBlockEnd<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    border: (value: import("csstype").Property.Border<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    borderTop: (value: import("csstype").Property.BorderTop<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    borderRight: (value: import("csstype").Property.BorderRight<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    borderBottom: (value: import("csstype").Property.BorderBottom<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    borderLeft: (value: import("csstype").Property.BorderLeft<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    borderColor: (value: import("csstype").Property.BorderColor, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    borderTopColor: (value: import("csstype").Property.BorderTopColor, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    borderRightColor: (value: import("csstype").Property.BorderRightColor, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    borderBottomColor: (value: import("csstype").Property.BorderBottomColor, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    borderLeftColor: (value: import("csstype").Property.BorderLeftColor, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    borderRadius: (value: import("csstype").Property.BorderRadius<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    width: (value: import("csstype").Property.Width<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    maxWidth: (value: import("csstype").Property.MaxWidth<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    minWidth: (value: import("csstype").Property.MinWidth<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    height: (value: import("csstype").Property.Height<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    maxHeight: (value: import("csstype").Property.MaxHeight<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    minHeight: (value: import("csstype").Property.MinHeight<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    boxSizing: (value: import("csstype").Property.BoxSizing, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    color: (value: import("csstype").Property.Color, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    bgcolor: (value: import("csstype").Property.BackgroundColor, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    backgroundColor: (value: import("csstype").Property.BackgroundColor, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    position: (value: import("csstype").Property.Position, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    zIndex: (value: import("csstype").Property.ZIndex, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    top: (value: import("csstype").Property.Top<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    right: (value: import("csstype").Property.Right<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    bottom: (value: import("csstype").Property.Bottom<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    left: (value: import("csstype").Property.Left<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    gap: (value: import("csstype").Property.Gap<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    columnGap: (value: import("csstype").Property.ColumnGap<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    rowGap: (value: import("csstype").Property.RowGap<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    gridColumn: (value: import("csstype").Property.GridColumn, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    gridRow: (value: import("csstype").Property.GridRow, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    gridAutoFlow: (value: import("csstype").Property.GridAutoFlow, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    gridAutoColumns: (value: import("csstype").Property.GridAutoColumns<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    gridAutoRows: (value: import("csstype").Property.GridAutoRows<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    gridTemplateColumns: (value: import("csstype").Property.GridTemplateColumns<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    gridTemplateRows: (value: import("csstype").Property.GridTemplateRows<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    gridTemplateAreas: (value: import("csstype").Property.GridTemplateAreas, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    gridArea: (value: import("csstype").Property.GridArea, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    flexBasis: (value: import("csstype").Property.FlexBasis<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    flexDirection: (value: import("csstype").Property.FlexDirection, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    flexWrap: (value: import("csstype").Property.FlexWrap, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    justifyContent: (value: import("csstype").Property.JustifyContent, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    alignItems: (value: import("csstype").Property.AlignItems, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    alignContent: (value: import("csstype").Property.AlignContent, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    order: (value: import("csstype").Property.Order, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    flex: (value: import("csstype").Property.Flex<string | number>, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    flexGrow: (value: import("csstype").Property.FlexGrow, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    flexShrink: (value: import("csstype").Property.FlexShrink, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    alignSelf: (value: import("csstype").Property.AlignSelf, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    justifyItems: (value: import("csstype").Property.JustifyItems, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    justifySelf: (value: import("csstype").Property.JustifySelf, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    displayPrint: (value: string, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    displayRaw: (value: import("csstype").Property.Display, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    overflow: (value: import("csstype").Property.Overflow, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    textOverflow: (value: import("csstype").Property.TextOverflow, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    visibility: (value: import("csstype").Property.Visibility, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
    whiteSpace: (value: import("csstype").Property.WhiteSpace, theme: Theme<import(".").Breakpoint>) => Record<string, any>;
};
export type SystemPropName = keyof typeof systemProps;
export declare const systemPropNames: ("color" | "left" | "right" | "bottom" | "top" | "flex" | "position" | "alignContent" | "alignItems" | "alignSelf" | "backgroundColor" | "borderBottomColor" | "borderLeftColor" | "borderRightColor" | "borderTopColor" | "boxSizing" | "columnGap" | "flexBasis" | "flexDirection" | "flexGrow" | "flexShrink" | "flexWrap" | "fontFamily" | "fontSize" | "fontStyle" | "fontWeight" | "gridAutoColumns" | "gridAutoFlow" | "gridAutoRows" | "gridTemplateAreas" | "gridTemplateColumns" | "gridTemplateRows" | "height" | "justifyContent" | "justifyItems" | "justifySelf" | "letterSpacing" | "lineHeight" | "marginBlockEnd" | "marginBlockStart" | "marginBottom" | "marginInlineEnd" | "marginInlineStart" | "marginLeft" | "marginRight" | "marginTop" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "order" | "paddingBlockEnd" | "paddingBlockStart" | "paddingBottom" | "paddingInlineEnd" | "paddingInlineStart" | "paddingLeft" | "paddingRight" | "paddingTop" | "rowGap" | "textAlign" | "textOverflow" | "textTransform" | "visibility" | "whiteSpace" | "width" | "zIndex" | "border" | "padding" | "borderBottom" | "borderColor" | "borderLeft" | "borderRadius" | "borderRight" | "borderTop" | "gap" | "gridArea" | "gridColumn" | "gridRow" | "margin" | "marginBlock" | "marginInline" | "overflow" | "paddingBlock" | "paddingInline" | "p" | "typography" | "displayPrint" | "m" | "mt" | "mr" | "mb" | "ml" | "mx" | "my" | "marginX" | "marginY" | "pt" | "pr" | "pb" | "pl" | "px" | "py" | "paddingX" | "paddingY" | "bgcolor" | "displayRaw")[];
type SystemStyledPropName = Extract<SystemPropName, keyof StyledPropsBase>;
export type SystemExtraPropName = Exclude<SystemPropName, SystemStyledPropName>;
export type SystemExtraPropsBase = Partial<{
    [K in SystemExtraPropName]: Parameters<(typeof systemProps)[K]>[0];
}>;
export type SystemProps<T = Theme> = Pick<StyledPropsBase, SystemStyledPropName> & SystemExtraPropsBase;
export default systemProps;
//# sourceMappingURL=systemProps.d.ts.map