import { handleBreakpoints } from "./breakpoints";
import { resolveStyledPropsValue } from "./resolveStyledProps";
import systemProps from "./systemProps";
import resolve from "@suid/css/resolve";
export function resolveSystemPropsValue(name, value, theme) {
    return systemProps[name](value, theme);
}
export function resolveSxPropsValue(name, value, theme) {
    return name in systemProps
        ? resolveSystemPropsValue(name, value, theme)
        : resolveStyledPropsValue(name, value);
}
function resolveSxProps(object, theme) {
    return resolve(object, (name, value) => {
        if (typeof value === "function") {
            value = value(theme);
        }
        if (value === null || value === undefined) {
            return value;
        }
        else if (typeof value === "object") {
            const sortedCss = {};
            for (const key of theme.breakpoints.keys) {
                sortedCss[theme.breakpoints.up(key)] = {};
            }
            return Object.assign(sortedCss, handleBreakpoints({ theme }, value, (v) => resolveSxPropsValue(name, v, theme) ?? { [name]: v }));
        }
        else {
            return resolveSxPropsValue(name, value, theme);
        }
    });
}
export default resolveSxProps;
