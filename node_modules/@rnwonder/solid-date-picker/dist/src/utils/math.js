var T = Object.defineProperty;
var h = (i, e, s) => e in i ? T(i, e, { enumerable: !0, configurable: !0, writable: !0, value: s }) : i[e] = s;
var l = (i, e, s) => (h(i, typeof e != "symbol" ? e + "" : e, s), s);
import { getJSDateFormat as c, labelFormat as C, convertDateToDateObject as U } from "./format.js";
class r {
  constructor(e) {
    l(this, "date");
    this.date = e;
  }
  static set(e) {
    const s = c(e);
    return new r(s);
  }
  plus(e) {
    const { day: s = 0, month: o = 0, year: a = 0, hour: n = 0, minute: d = 0, second: u = 0 } = e, t = new Date(this.date.getTime());
    return a && t.setUTCFullYear(t.getUTCFullYear() + a), o && t.setUTCMonth(t.getUTCMonth() + o), s && t.setUTCDate(t.getUTCDate() + s), n && t.setUTCHours(t.getUTCHours() + n), d && t.setUTCMinutes(t.getUTCMinutes() + d), u && t.setUTCSeconds(t.getUTCSeconds() + u), new r(t);
  }
  minus(e) {
    const { day: s = 0, month: o = 0, year: a = 0, hour: n = 0, minute: d = 0, second: u = 0 } = e, t = new Date(this.date.getTime());
    return a && t.setUTCFullYear(t.getUTCFullYear() - a), o && t.setUTCMonth(t.getUTCMonth() - o), s && t.setUTCDate(t.getUTCDate() - s), n && t.setUTCHours(t.getUTCHours() - n), d && t.setUTCMinutes(t.getUTCMinutes() - d), u && t.setUTCSeconds(t.getUTCSeconds() - u), new r(t);
  }
  diffNow(e) {
    return this.diff(new r(/* @__PURE__ */ new Date()), e);
  }
  diff(e, s = ["milliseconds"]) {
    const o = this.date.getTime() - e.date.getTime(), a = {}, n = Math.abs(o);
    return s.includes("milliseconds") && (a.milliseconds = n), s.includes("seconds") && (a.seconds = n / 1e3), s.includes("minutes") && (a.minutes = n / 6e4), s.includes("hours") && (a.hours = n / 36e5), s.includes("days") && (a.days = n / 864e5), s.includes("weeks") && (a.weeks = n / 6048e5), s.includes("months") && (a.months = 12 * (this.date.getUTCFullYear() - e.date.getUTCFullYear()) + (this.date.getUTCMonth() - e.date.getUTCMonth())), s.includes("quarters") && (a.quarters = (a.months ?? 12 * (this.date.getUTCFullYear() - e.date.getUTCFullYear()) + (this.date.getUTCMonth() - e.date.getUTCMonth())) / 3), s.includes("years") && (a.years = (a.months ?? 12 * (this.date.getUTCFullYear() - e.date.getUTCFullYear()) + (this.date.getUTCMonth() - e.date.getUTCMonth())) / 12), a;
  }
  toString(e) {
    const { localeOptions: s, locale: o, format: a } = e || {};
    return C({ date: this.date, option: s || { month: "short", day: "numeric", year: "numeric" }, locale: o, format: a });
  }
  toObject() {
    return U(this.date);
  }
  toJSDate() {
    return this.date;
  }
  toMillis() {
    return this.date.getTime();
  }
  toISO() {
    return this.date.toISOString();
  }
}
const M = r;
export {
  M as default
};
