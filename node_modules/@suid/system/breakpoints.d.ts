import type { Theme } from "./createTheme";
import type { Breakpoint } from "./createTheme/createBreakpoints";
import type StyledProps from "./styledProps";
export type BreakpointValueType<T extends string> = {
    [K in T]?: number | boolean | "auto";
};
export type ColumnsType<T extends string, V = any> = {
    [K in T]?: V;
} | V | V[];
export type ThemeBreakpointBase<K extends string> = {
    [key in K]?: boolean | number;
};
export declare const values: {
    xs: number;
    sm: number;
    md: number;
    lg: number;
    xl: number;
};
export declare function handleBreakpoints(props: {
    theme: Theme;
}, propValue: any[], styleFromPropValue: (value: any, breakpoint?: Breakpoint) => StyledProps): any;
export declare function getOffset(val: number | string): string;
export declare function computeBreakpointsBase<K extends string>(values: ColumnsType<K>, breakpoints: Record<K, number>): ThemeBreakpointBase<K>;
export declare function resolveBreakpointValues<K extends string>(data: {
    values: ColumnsType<K>;
    breakpoints?: Record<K, number>;
    base?: ThemeBreakpointBase<K>;
}): any;
//# sourceMappingURL=breakpoints.d.ts.map