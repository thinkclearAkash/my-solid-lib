const F = "-";
function X(e) {
  const o = function(s) {
    const { theme: r, prefix: i } = s, a = { nextPart: /* @__PURE__ */ new Map(), validators: [] };
    return function(u, f) {
      return f ? u.map(([v, m]) => [v, m.map((b) => typeof b == "string" ? f + b : typeof b == "object" ? Object.fromEntries(Object.entries(b).map(([M, h]) => [f + M, h])) : b)]) : u;
    }(Object.entries(s.classGroups), i).forEach(([u, f]) => {
      A(f, a, u, r);
    }), a;
  }(e), { conflictingClassGroups: t, conflictingClassGroupModifiers: l } = e;
  return { getClassGroupId: function(s) {
    const r = s.split(F);
    return r[0] === "" && r.length !== 1 && r.shift(), K(r, o) || function(i) {
      if (J.test(i)) {
        const a = J.exec(i)[1], g = a == null ? void 0 : a.substring(0, a.indexOf(":"));
        if (g)
          return "arbitrary.." + g;
      }
    }(s);
  }, getConflictingClassGroupIds: function(s, r) {
    const i = t[s] || [];
    return r && l[s] ? [...i, ...l[s]] : i;
  } };
}
function K(e, o) {
  var i;
  if (e.length === 0)
    return o.classGroupId;
  const t = e[0], l = o.nextPart.get(t), s = l ? K(e.slice(1), l) : void 0;
  if (s)
    return s;
  if (o.validators.length === 0)
    return;
  const r = e.join(F);
  return (i = o.validators.find(({ validator: a }) => a(r))) == null ? void 0 : i.classGroupId;
}
const J = /^\[(.+)\]$/;
function A(e, o, t, l) {
  e.forEach((s) => {
    if (typeof s != "string") {
      if (typeof s == "function")
        return s.isThemeGetter ? void A(s(l), o, t, l) : void o.validators.push({ validator: s, classGroupId: t });
      Object.entries(s).forEach(([r, i]) => {
        A(i, H(o, r), t, l);
      });
    } else
      (s === "" ? o : H(o, s)).classGroupId = t;
  });
}
function H(e, o) {
  let t = e;
  return o.split(F).forEach((l) => {
    t.nextPart.has(l) || t.nextPart.set(l, { nextPart: /* @__PURE__ */ new Map(), validators: [] }), t = t.nextPart.get(l);
  }), t;
}
function Y(e) {
  if (e < 1)
    return { get: () => {
    }, set: () => {
    } };
  let o = 0, t = /* @__PURE__ */ new Map(), l = /* @__PURE__ */ new Map();
  function s(r, i) {
    t.set(r, i), o++, o > e && (o = 0, l = t, t = /* @__PURE__ */ new Map());
  }
  return { get(r) {
    let i = t.get(r);
    return i !== void 0 ? i : (i = l.get(r)) !== void 0 ? (s(r, i), i) : void 0;
  }, set(r, i) {
    t.has(r) ? t.set(r, i) : s(r, i);
  } };
}
const L = "!";
function Z(e) {
  const o = e.separator, t = o.length === 1, l = o[0], s = o.length;
  return function(r) {
    const i = [];
    let a, g = 0, u = 0;
    for (let m = 0; m < r.length; m++) {
      let b = r[m];
      if (g === 0) {
        if (b === l && (t || r.slice(m, m + s) === o)) {
          i.push(r.slice(u, m)), u = m + s;
          continue;
        }
        if (b === "/") {
          a = m;
          continue;
        }
      }
      b === "[" ? g++ : b === "]" && g--;
    }
    const f = i.length === 0 ? r : r.substring(u), v = f.startsWith(L);
    return { modifiers: i, hasImportantModifier: v, baseClassName: v ? f.substring(1) : f, maybePostfixModifierPosition: a && a > u ? a - u : void 0 };
  };
}
const ee = /\s+/;
function oe() {
  let e, o, t = 0, l = "";
  for (; t < arguments.length; )
    (e = arguments[t++]) && (o = Q(e)) && (l && (l += " "), l += o);
  return l;
}
function Q(e) {
  if (typeof e == "string")
    return e;
  let o, t = "";
  for (let l = 0; l < e.length; l++)
    e[l] && (o = Q(e[l])) && (t && (t += " "), t += o);
  return t;
}
function re(e, ...o) {
  let t, l, s, r = function(a) {
    const g = o.reduce((u, f) => f(u), e());
    return t = function(u) {
      return { cache: Y(u.cacheSize), splitModifiers: Z(u), ...X(u) };
    }(g), l = t.cache.get, s = t.cache.set, r = i, i(a);
  };
  function i(a) {
    const g = l(a);
    if (g)
      return g;
    const u = function(f, v) {
      const { splitModifiers: m, getClassGroupId: b, getConflictingClassGroupIds: M } = v, h = /* @__PURE__ */ new Set();
      return f.trim().split(ee).map((p) => {
        const { modifiers: y, hasImportantModifier: x, baseClassName: C, maybePostfixModifierPosition: w } = m(p);
        let k = b(w ? C.substring(0, w) : C), $ = !!w;
        if (!k) {
          if (!w)
            return { isTailwindClass: !1, originalClassName: p };
          if (k = b(C), !k)
            return { isTailwindClass: !1, originalClassName: p };
          $ = !1;
        }
        const E = function(N) {
          if (N.length <= 1)
            return N;
          const I = [];
          let c = [];
          return N.forEach((S) => {
            S[0] === "[" ? (I.push(...c.sort(), S), c = []) : c.push(S);
          }), I.push(...c.sort()), I;
        }(y).join(":");
        return { isTailwindClass: !0, modifierId: x ? E + L : E, classGroupId: k, originalClassName: p, hasPostfixModifier: $ };
      }).reverse().filter((p) => {
        if (!p.isTailwindClass)
          return !0;
        const { modifierId: y, classGroupId: x, hasPostfixModifier: C } = p, w = y + x;
        return !h.has(w) && (h.add(w), M(x, C).forEach((k) => h.add(y + k)), !0);
      }).reverse().map((p) => p.originalClassName).join(" ");
    }(a, t);
    return s(a, u), u;
  }
  return function() {
    return r(oe.apply(null, arguments));
  };
}
function d(e) {
  const o = (t) => t[e] || [];
  return o.isThemeGetter = !0, o;
}
const U = /^\[(?:([a-z-]+):)?(.+)\]$/i, te = /^\d+\/\d+$/, ne = /* @__PURE__ */ new Set(["px", "full", "screen"]), le = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/, se = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/, ie = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/, ae = /^-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/, ce = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
function z(e) {
  return P(e) || ne.has(e) || te.test(e);
}
function j(e) {
  return T(e, "length", he);
}
function P(e) {
  return !!e && !Number.isNaN(Number(e));
}
function _(e) {
  return T(e, "number", P);
}
function B(e) {
  return !!e && Number.isInteger(Number(e));
}
function de(e) {
  return e.endsWith("%") && P(e.slice(0, -1));
}
function n(e) {
  return U.test(e);
}
function G(e) {
  return le.test(e);
}
const ue = /* @__PURE__ */ new Set(["length", "size", "percentage"]);
function pe(e) {
  return T(e, ue, V);
}
function be(e) {
  return T(e, "position", V);
}
const fe = /* @__PURE__ */ new Set(["image", "url"]);
function me(e) {
  return T(e, fe, ye);
}
function ge(e) {
  return T(e, "", xe);
}
function R() {
  return !0;
}
function T(e, o, t) {
  const l = U.exec(e);
  return !!l && (l[1] ? typeof o == "string" ? l[1] === o : o.has(l[1]) : t(l[2]));
}
function he(e) {
  return se.test(e) && !ie.test(e);
}
function V() {
  return !1;
}
function xe(e) {
  return ae.test(e);
}
function ye(e) {
  return ce.test(e);
}
function we() {
  const e = d("colors"), o = d("spacing"), t = d("blur"), l = d("brightness"), s = d("borderColor"), r = d("borderRadius"), i = d("borderSpacing"), a = d("borderWidth"), g = d("contrast"), u = d("grayscale"), f = d("hueRotate"), v = d("invert"), m = d("gap"), b = d("gradientColorStops"), M = d("gradientColorStopPositions"), h = d("inset"), p = d("margin"), y = d("opacity"), x = d("padding"), C = d("saturate"), w = d("scale"), k = d("sepia"), $ = d("skew"), E = d("space"), N = d("translate"), I = () => ["auto", n, o], c = () => [n, o], S = () => ["", z, j], q = () => ["auto", P, n], O = () => ["", "0", n], W = () => [P, _], D = () => [P, n];
  return { cacheSize: 500, separator: ":", theme: { colors: [R], spacing: [z, j], blur: ["none", "", G, n], brightness: W(), borderColor: [e], borderRadius: ["none", "", "full", G, n], borderSpacing: c(), borderWidth: S(), contrast: W(), grayscale: O(), hueRotate: D(), invert: O(), gap: c(), gradientColorStops: [e], gradientColorStopPositions: [de, j], inset: I(), margin: I(), opacity: W(), padding: c(), saturate: W(), scale: W(), sepia: O(), skew: D(), space: c(), translate: c() }, classGroups: { aspect: [{ aspect: ["auto", "square", "video", n] }], container: ["container"], columns: [{ columns: [G] }], "break-after": [{ "break-after": ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"] }], "break-before": [{ "break-before": ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"] }], "break-inside": [{ "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"] }], "box-decoration": [{ "box-decoration": ["slice", "clone"] }], box: [{ box: ["border", "content"] }], display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"], float: [{ float: ["right", "left", "none", "start", "end"] }], clear: [{ clear: ["left", "right", "both", "none", "start", "end"] }], isolation: ["isolate", "isolation-auto"], "object-fit": [{ object: ["contain", "cover", "fill", "none", "scale-down"] }], "object-position": [{ object: ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top", n] }], overflow: [{ overflow: ["auto", "hidden", "clip", "visible", "scroll"] }], "overflow-x": [{ "overflow-x": ["auto", "hidden", "clip", "visible", "scroll"] }], "overflow-y": [{ "overflow-y": ["auto", "hidden", "clip", "visible", "scroll"] }], overscroll: [{ overscroll: ["auto", "contain", "none"] }], "overscroll-x": [{ "overscroll-x": ["auto", "contain", "none"] }], "overscroll-y": [{ "overscroll-y": ["auto", "contain", "none"] }], position: ["static", "fixed", "absolute", "relative", "sticky"], inset: [{ inset: [h] }], "inset-x": [{ "inset-x": [h] }], "inset-y": [{ "inset-y": [h] }], start: [{ start: [h] }], end: [{ end: [h] }], top: [{ top: [h] }], right: [{ right: [h] }], bottom: [{ bottom: [h] }], left: [{ left: [h] }], visibility: ["visible", "invisible", "collapse"], z: [{ z: ["auto", B, n] }], basis: [{ basis: I() }], "flex-direction": [{ flex: ["row", "row-reverse", "col", "col-reverse"] }], "flex-wrap": [{ flex: ["wrap", "wrap-reverse", "nowrap"] }], flex: [{ flex: ["1", "auto", "initial", "none", n] }], grow: [{ grow: O() }], shrink: [{ shrink: O() }], order: [{ order: ["first", "last", "none", B, n] }], "grid-cols": [{ "grid-cols": [R] }], "col-start-end": [{ col: ["auto", { span: ["full", B, n] }, n] }], "col-start": [{ "col-start": q() }], "col-end": [{ "col-end": q() }], "grid-rows": [{ "grid-rows": [R] }], "row-start-end": [{ row: ["auto", { span: [B, n] }, n] }], "row-start": [{ "row-start": q() }], "row-end": [{ "row-end": q() }], "grid-flow": [{ "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"] }], "auto-cols": [{ "auto-cols": ["auto", "min", "max", "fr", n] }], "auto-rows": [{ "auto-rows": ["auto", "min", "max", "fr", n] }], gap: [{ gap: [m] }], "gap-x": [{ "gap-x": [m] }], "gap-y": [{ "gap-y": [m] }], "justify-content": [{ justify: ["normal", "start", "end", "center", "between", "around", "evenly", "stretch"] }], "justify-items": [{ "justify-items": ["start", "end", "center", "stretch"] }], "justify-self": [{ "justify-self": ["auto", "start", "end", "center", "stretch"] }], "align-content": [{ content: ["normal", "start", "end", "center", "between", "around", "evenly", "stretch", "baseline"] }], "align-items": [{ items: ["start", "end", "center", "baseline", "stretch"] }], "align-self": [{ self: ["auto", "start", "end", "center", "stretch", "baseline"] }], "place-content": [{ "place-content": ["start", "end", "center", "between", "around", "evenly", "stretch", "baseline"] }], "place-items": [{ "place-items": ["start", "end", "center", "baseline", "stretch"] }], "place-self": [{ "place-self": ["auto", "start", "end", "center", "stretch"] }], p: [{ p: [x] }], px: [{ px: [x] }], py: [{ py: [x] }], ps: [{ ps: [x] }], pe: [{ pe: [x] }], pt: [{ pt: [x] }], pr: [{ pr: [x] }], pb: [{ pb: [x] }], pl: [{ pl: [x] }], m: [{ m: [p] }], mx: [{ mx: [p] }], my: [{ my: [p] }], ms: [{ ms: [p] }], me: [{ me: [p] }], mt: [{ mt: [p] }], mr: [{ mr: [p] }], mb: [{ mb: [p] }], ml: [{ ml: [p] }], "space-x": [{ "space-x": [E] }], "space-x-reverse": ["space-x-reverse"], "space-y": [{ "space-y": [E] }], "space-y-reverse": ["space-y-reverse"], w: [{ w: ["auto", "min", "max", "fit", "svw", "lvw", "dvw", n, o] }], "min-w": [{ "min-w": [n, o, "min", "max", "fit"] }], "max-w": [{ "max-w": [n, o, "none", "full", "min", "max", "fit", "prose", { screen: [G] }, G] }], h: [{ h: [n, o, "auto", "min", "max", "fit", "svh", "lvh", "dvh"] }], "min-h": [{ "min-h": [n, o, "min", "max", "fit", "svh", "lvh", "dvh"] }], "max-h": [{ "max-h": [n, o, "min", "max", "fit", "svh", "lvh", "dvh"] }], size: [{ size: [n, o, "auto", "min", "max", "fit"] }], "font-size": [{ text: ["base", G, j] }], "font-smoothing": ["antialiased", "subpixel-antialiased"], "font-style": ["italic", "not-italic"], "font-weight": [{ font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", _] }], "font-family": [{ font: [R] }], "fvn-normal": ["normal-nums"], "fvn-ordinal": ["ordinal"], "fvn-slashed-zero": ["slashed-zero"], "fvn-figure": ["lining-nums", "oldstyle-nums"], "fvn-spacing": ["proportional-nums", "tabular-nums"], "fvn-fraction": ["diagonal-fractions", "stacked-fractons"], tracking: [{ tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", n] }], "line-clamp": [{ "line-clamp": ["none", P, _] }], leading: [{ leading: ["none", "tight", "snug", "normal", "relaxed", "loose", z, n] }], "list-image": [{ "list-image": ["none", n] }], "list-style-type": [{ list: ["none", "disc", "decimal", n] }], "list-style-position": [{ list: ["inside", "outside"] }], "placeholder-color": [{ placeholder: [e] }], "placeholder-opacity": [{ "placeholder-opacity": [y] }], "text-alignment": [{ text: ["left", "center", "right", "justify", "start", "end"] }], "text-color": [{ text: [e] }], "text-opacity": [{ "text-opacity": [y] }], "text-decoration": ["underline", "overline", "line-through", "no-underline"], "text-decoration-style": [{ decoration: ["solid", "dashed", "dotted", "double", "none", "wavy"] }], "text-decoration-thickness": [{ decoration: ["auto", "from-font", z, j] }], "underline-offset": [{ "underline-offset": ["auto", z, n] }], "text-decoration-color": [{ decoration: [e] }], "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"], "text-overflow": ["truncate", "text-ellipsis", "text-clip"], "text-wrap": [{ text: ["wrap", "nowrap", "balance", "pretty"] }], indent: [{ indent: c() }], "vertical-align": [{ align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", n] }], whitespace: [{ whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"] }], break: [{ break: ["normal", "words", "all", "keep"] }], hyphens: [{ hyphens: ["none", "manual", "auto"] }], content: [{ content: ["none", n] }], "bg-attachment": [{ bg: ["fixed", "local", "scroll"] }], "bg-clip": [{ "bg-clip": ["border", "padding", "content", "text"] }], "bg-opacity": [{ "bg-opacity": [y] }], "bg-origin": [{ "bg-origin": ["border", "padding", "content"] }], "bg-position": [{ bg: ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top", be] }], "bg-repeat": [{ bg: ["no-repeat", { repeat: ["", "x", "y", "round", "space"] }] }], "bg-size": [{ bg: ["auto", "cover", "contain", pe] }], "bg-image": [{ bg: ["none", { "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"] }, me] }], "bg-color": [{ bg: [e] }], "gradient-from-pos": [{ from: [M] }], "gradient-via-pos": [{ via: [M] }], "gradient-to-pos": [{ to: [M] }], "gradient-from": [{ from: [b] }], "gradient-via": [{ via: [b] }], "gradient-to": [{ to: [b] }], rounded: [{ rounded: [r] }], "rounded-s": [{ "rounded-s": [r] }], "rounded-e": [{ "rounded-e": [r] }], "rounded-t": [{ "rounded-t": [r] }], "rounded-r": [{ "rounded-r": [r] }], "rounded-b": [{ "rounded-b": [r] }], "rounded-l": [{ "rounded-l": [r] }], "rounded-ss": [{ "rounded-ss": [r] }], "rounded-se": [{ "rounded-se": [r] }], "rounded-ee": [{ "rounded-ee": [r] }], "rounded-es": [{ "rounded-es": [r] }], "rounded-tl": [{ "rounded-tl": [r] }], "rounded-tr": [{ "rounded-tr": [r] }], "rounded-br": [{ "rounded-br": [r] }], "rounded-bl": [{ "rounded-bl": [r] }], "border-w": [{ border: [a] }], "border-w-x": [{ "border-x": [a] }], "border-w-y": [{ "border-y": [a] }], "border-w-s": [{ "border-s": [a] }], "border-w-e": [{ "border-e": [a] }], "border-w-t": [{ "border-t": [a] }], "border-w-r": [{ "border-r": [a] }], "border-w-b": [{ "border-b": [a] }], "border-w-l": [{ "border-l": [a] }], "border-opacity": [{ "border-opacity": [y] }], "border-style": [{ border: ["solid", "dashed", "dotted", "double", "none", "hidden"] }], "divide-x": [{ "divide-x": [a] }], "divide-x-reverse": ["divide-x-reverse"], "divide-y": [{ "divide-y": [a] }], "divide-y-reverse": ["divide-y-reverse"], "divide-opacity": [{ "divide-opacity": [y] }], "divide-style": [{ divide: ["solid", "dashed", "dotted", "double", "none"] }], "border-color": [{ border: [s] }], "border-color-x": [{ "border-x": [s] }], "border-color-y": [{ "border-y": [s] }], "border-color-t": [{ "border-t": [s] }], "border-color-r": [{ "border-r": [s] }], "border-color-b": [{ "border-b": [s] }], "border-color-l": [{ "border-l": [s] }], "divide-color": [{ divide: [s] }], "outline-style": [{ outline: ["", "solid", "dashed", "dotted", "double", "none"] }], "outline-offset": [{ "outline-offset": [z, n] }], "outline-w": [{ outline: [z, j] }], "outline-color": [{ outline: [e] }], "ring-w": [{ ring: S() }], "ring-w-inset": ["ring-inset"], "ring-color": [{ ring: [e] }], "ring-opacity": [{ "ring-opacity": [y] }], "ring-offset-w": [{ "ring-offset": [z, j] }], "ring-offset-color": [{ "ring-offset": [e] }], shadow: [{ shadow: ["", "inner", "none", G, ge] }], "shadow-color": [{ shadow: [R] }], opacity: [{ opacity: [y] }], "mix-blend": [{ "mix-blend": ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity", "plus-lighter"] }], "bg-blend": [{ "bg-blend": ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity", "plus-lighter"] }], filter: [{ filter: ["", "none"] }], blur: [{ blur: [t] }], brightness: [{ brightness: [l] }], contrast: [{ contrast: [g] }], "drop-shadow": [{ "drop-shadow": ["", "none", G, n] }], grayscale: [{ grayscale: [u] }], "hue-rotate": [{ "hue-rotate": [f] }], invert: [{ invert: [v] }], saturate: [{ saturate: [C] }], sepia: [{ sepia: [k] }], "backdrop-filter": [{ "backdrop-filter": ["", "none"] }], "backdrop-blur": [{ "backdrop-blur": [t] }], "backdrop-brightness": [{ "backdrop-brightness": [l] }], "backdrop-contrast": [{ "backdrop-contrast": [g] }], "backdrop-grayscale": [{ "backdrop-grayscale": [u] }], "backdrop-hue-rotate": [{ "backdrop-hue-rotate": [f] }], "backdrop-invert": [{ "backdrop-invert": [v] }], "backdrop-opacity": [{ "backdrop-opacity": [y] }], "backdrop-saturate": [{ "backdrop-saturate": [C] }], "backdrop-sepia": [{ "backdrop-sepia": [k] }], "border-collapse": [{ border: ["collapse", "separate"] }], "border-spacing": [{ "border-spacing": [i] }], "border-spacing-x": [{ "border-spacing-x": [i] }], "border-spacing-y": [{ "border-spacing-y": [i] }], "table-layout": [{ table: ["auto", "fixed"] }], caption: [{ caption: ["top", "bottom"] }], transition: [{ transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", n] }], duration: [{ duration: D() }], ease: [{ ease: ["linear", "in", "out", "in-out", n] }], delay: [{ delay: D() }], animate: [{ animate: ["none", "spin", "ping", "pulse", "bounce", n] }], transform: [{ transform: ["", "gpu", "none"] }], scale: [{ scale: [w] }], "scale-x": [{ "scale-x": [w] }], "scale-y": [{ "scale-y": [w] }], rotate: [{ rotate: [B, n] }], "translate-x": [{ "translate-x": [N] }], "translate-y": [{ "translate-y": [N] }], "skew-x": [{ "skew-x": [$] }], "skew-y": [{ "skew-y": [$] }], "transform-origin": [{ origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", n] }], accent: [{ accent: ["auto", e] }], appearance: [{ appearance: ["none", "auto"] }], cursor: [{ cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", n] }], "caret-color": [{ caret: [e] }], "pointer-events": [{ "pointer-events": ["none", "auto"] }], resize: [{ resize: ["none", "y", "x", ""] }], "scroll-behavior": [{ scroll: ["auto", "smooth"] }], "scroll-m": [{ "scroll-m": c() }], "scroll-mx": [{ "scroll-mx": c() }], "scroll-my": [{ "scroll-my": c() }], "scroll-ms": [{ "scroll-ms": c() }], "scroll-me": [{ "scroll-me": c() }], "scroll-mt": [{ "scroll-mt": c() }], "scroll-mr": [{ "scroll-mr": c() }], "scroll-mb": [{ "scroll-mb": c() }], "scroll-ml": [{ "scroll-ml": c() }], "scroll-p": [{ "scroll-p": c() }], "scroll-px": [{ "scroll-px": c() }], "scroll-py": [{ "scroll-py": c() }], "scroll-ps": [{ "scroll-ps": c() }], "scroll-pe": [{ "scroll-pe": c() }], "scroll-pt": [{ "scroll-pt": c() }], "scroll-pr": [{ "scroll-pr": c() }], "scroll-pb": [{ "scroll-pb": c() }], "scroll-pl": [{ "scroll-pl": c() }], "snap-align": [{ snap: ["start", "end", "center", "align-none"] }], "snap-stop": [{ snap: ["normal", "always"] }], "snap-type": [{ snap: ["none", "x", "y", "both"] }], "snap-strictness": [{ snap: ["mandatory", "proximity"] }], touch: [{ touch: ["auto", "none", "manipulation"] }], "touch-x": [{ "touch-pan": ["x", "left", "right"] }], "touch-y": [{ "touch-pan": ["y", "up", "down"] }], "touch-pz": ["touch-pinch-zoom"], select: [{ select: ["none", "text", "all", "auto"] }], "will-change": [{ "will-change": ["auto", "scroll", "contents", "transform", n] }], fill: [{ fill: [e, "none"] }], "stroke-w": [{ stroke: [z, j, _] }], stroke: [{ stroke: [e, "none"] }], sr: ["sr-only", "not-sr-only"], "forced-color-adjust": [{ "forced-color-adjust": ["auto", "none"] }] }, conflictingClassGroups: { overflow: ["overflow-x", "overflow-y"], overscroll: ["overscroll-x", "overscroll-y"], inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"], "inset-x": ["right", "left"], "inset-y": ["top", "bottom"], flex: ["basis", "grow", "shrink"], gap: ["gap-x", "gap-y"], p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"], px: ["pr", "pl"], py: ["pt", "pb"], m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"], mx: ["mr", "ml"], my: ["mt", "mb"], size: ["w", "h"], "font-size": ["leading"], "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"], "fvn-ordinal": ["fvn-normal"], "fvn-slashed-zero": ["fvn-normal"], "fvn-figure": ["fvn-normal"], "fvn-spacing": ["fvn-normal"], "fvn-fraction": ["fvn-normal"], "line-clamp": ["display", "overflow"], rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"], "rounded-s": ["rounded-ss", "rounded-es"], "rounded-e": ["rounded-se", "rounded-ee"], "rounded-t": ["rounded-tl", "rounded-tr"], "rounded-r": ["rounded-tr", "rounded-br"], "rounded-b": ["rounded-br", "rounded-bl"], "rounded-l": ["rounded-tl", "rounded-bl"], "border-spacing": ["border-spacing-x", "border-spacing-y"], "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"], "border-w-x": ["border-w-r", "border-w-l"], "border-w-y": ["border-w-t", "border-w-b"], "border-color": ["border-color-t", "border-color-r", "border-color-b", "border-color-l"], "border-color-x": ["border-color-r", "border-color-l"], "border-color-y": ["border-color-t", "border-color-b"], "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"], "scroll-mx": ["scroll-mr", "scroll-ml"], "scroll-my": ["scroll-mt", "scroll-mb"], "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"], "scroll-px": ["scroll-pr", "scroll-pl"], "scroll-py": ["scroll-pt", "scroll-pb"], touch: ["touch-x", "touch-y", "touch-pz"], "touch-x": ["touch"], "touch-y": ["touch"], "touch-pz": ["touch"] }, conflictingClassGroupModifiers: { "font-size": ["leading"] } };
}
const ve = re(we);
export {
  re as createTailwindMerge,
  d as fromTheme,
  we as getDefaultConfig,
  oe as twJoin,
  ve as twMerge
};
